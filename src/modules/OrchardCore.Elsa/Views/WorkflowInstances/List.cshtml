@using Elsa.Workflows
@using Microsoft.AspNetCore.Authorization
@using OrchardCore.Elsa
@model OrchardCore.Elsa.Controllers.WorkflowInstances.List.WorkflowIndexViewModel
@inject IAuthorizationService AuthorizationService
@{
    int startIndex = (Model.Pager.Page - 1) * (Model.Pager.PageSize) + 1;
    int endIndex = startIndex + Model.Entries.Count - 1;
}
<script asp-name="bootstrap-select" depends-on="bootstrap" at="Foot"></script>

<zone Name="Title"><h1>@RenderTitleSegments(T["Workflow Instances"])</h1></zone>

<form asp-action="List" id="workflows-form" method="post" class="no-multisubmit">
    <input type="submit" name="submit.Filter" id="submitFilter" class="visually-hidden"/>
    <input type="submit" name="submit.BulkAction" class="visually-hidden"/>
    <input asp-for="Options.InstanceBulkAction" type="hidden"/>

    <div class="mb-3">
        <ul class="list-group with-checkbox">
            <li class="list-group-item text-bg-theme">
                <div class="row">
                    <div class="col mb-1 text-nowrap">
                        <div class="form-check mt-2 me-n2">
                            <input type="checkbox" class="form-check-input" id="select-all">
                            <label class="form-check-label" for="select-all" id="select-all-label" title="@T["Select All"]"></label>
                            <label id="items" for="select-all">@T.Plural(Model.Entries.Count, "1 item", "{0} items")<span class="text-muted" title="@T["Items {0} to {1}", startIndex, endIndex]">@T.Plural((int)Model.Pager.TotalItemCount, " / {0} item in total", " / {0} items in total")</span></label>
                            <label id="selected-items" class="text-muted" for="select-all"></label>
                        </div>
                    </div>
                    <div class="col-2 mb-1" style="display:none" id="actions">
                        <div class="dropdown float-end mt-1">
                            <button class="btn btn-sm btn-light dropdown-toggle" type="button" id="bulk-action-menu-button" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                @T["Actions"]
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="bulk-action-menu-button">
                                @foreach (var item in Model.Options.WorkflowsBulkAction)
                                {
                                    <li><a class="dropdown-item" href="javascript:void(0)" data-action="@item.Value" data-title="@T["Bulk Action"]" data-message="@T["Are you sure you want to {0} these items?", @item.Text.ToLower()]">@item.Text</a></li>
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="col mb-1 filter">
                        <div class="btn-group filter float-end mt-1">
                            <select asp-for="Options.SelectedWorkflowDefinitionId" asp-items="Model.WorkflowDefinitionItems" class="selectpicker workflowdefinition-selectpicker show-tick me-2" data-header="@T["Workflow Definition"]" data-selected-text-format="static" data-width="fit" data-dropdown-align-right="auto" title="@T["Workflow Definition"]" data-style="btn-sm" data-live-search="true"></select>
                            <select asp-for="Options.InstanceFilter" asp-items="Model.Options.WorkflowsStatuses" class="selectpicker show-tick me-2" data-header="@T["Filter by status"]" data-live-search="true" data-selected-text-format="static" data-dropdown-align-right="true" data-width="fit" title="@T["Status"]" data-style="btn-sm"></select>
                            <select asp-for="Options.InstanceOrderBy" asp-items="@Model.Options.WorkflowsSorts" class="selectpicker show-tick" data-header="@T["Sort by"]" data-width="fit" data-selected-text-format="static" data-dropdown-align-right="true" title="@T["Sort"]" data-style="btn-sm"></select>
                        </div>
                    </div>
                </div>
            </li>
            @if (Model.Entries.Any())
            {
                @for (var i = 0; i < Model.Entries.Count; i++)
                {
                    var entry = Model.Entries[i];
                    var statusCss = string.Empty;
                    var restartable = true;
                    var workflowDefinition = Model.WorkflowDefinitions[entry.WorkflowInstance.DefinitionId];
                    switch (entry.WorkflowInstance.SubStatus)
                    {
                        case WorkflowSubStatus.Cancelled:
                            statusCss = "warning";
                            break;
                        case WorkflowSubStatus.Pending:
                        default:
                            statusCss = "secondary";
                            break;
                        case WorkflowSubStatus.Finished:
                            statusCss = "success";
                            break;
                        case WorkflowSubStatus.Executing:
                        case WorkflowSubStatus.Suspended:
                            statusCss = "info";
                            restartable = false;
                            break;
                        case WorkflowSubStatus.Faulted:
                            statusCss = "danger";
                            break;
                    }

                    <li class="list-group-item">
                        <div class="row">
                            <div class="col-lg col-12 title d-flex align-items-center">
                                <div class="selectors-container d-flex">

                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" value="@entry.WorkflowInstance.Id" name="itemIds" id="itemIds-@entry.WorkflowInstance.Id">
                                        <label class="form-check-label" for="itemIds-@entry.WorkflowInstance.Id"></label>
                                    </div>
                                </div>
                                <div class="summary d-flex flex-column flex-md-row">
                                    <div class="workflowdefinition me-2">
                                        <a asp-action="Details" asp-route-id="@entry.WorkflowInstance.Id">@entry.WorkflowInstance.Id</a>
                                    </div>
                                    <div class="workflowdefinition me-1">
                                        <span class="badge ta-badge font-weight-normal">
                                            <i class="fa-regular fa-file-alt text-secondary" aria-hidden="true"></i> 
                                            <a asp-route-options.selectedworkflowdefinitionid=@entry.WorkflowInstance.DefinitionId data-bs-toggle="tooltip" title="@T["Workflow Definition"]">@workflowDefinition.Name</a>
                                        </span>
                                    </div>
                                    <div class="tags me-1">
                                        <span class="badge ta-badge font-weight-normal text-bg-@statusCss" data-bs-toggle="tooltip" data-bs-original-title="@entry.WorkflowInstance.SubStatus.ToString()">
                                            @T[entry.WorkflowInstance.SubStatus.ToString()]
                                        </span>
                                    </div>
                                    <div class="metadata me-1">
                                        <span class="badge ta-badge font-weight-normal" data-bs-toggle="tooltip" data-bs-original-title="@entry.WorkflowInstance.CreatedAt.DateTime">
                                            <svg class="svg-inline--fa fa-calendar text-secondary" aria-hidden="true" data-prefix="fas" data-icon="calendar" role="img" viewBox="0 0 448 512" data-fa-i2svg=""><path fill="currentColor"
                                                                                                                                                                                                                     d="M128 0C110.3 0 96 14.3 96 32l0 32-32 0C28.7 64 0 92.7 0 128l0 48 448 0 0-48c0-35.3-28.7-64-64-64l-32 0 0-32c0-17.7-14.3-32-32-32s-32 14.3-32 32l0 32-128 0 0-32c0-17.7-14.3-32-32-32zM0 224L0 416c0 35.3 28.7 64 64 64l320 0c35.3 0 64-28.7 64-64l0-192-448 0z"></path></svg>
                                            <!-- <i class="fa-solid fa-calendar text-secondary" aria-hidden="true"></i> Font Awesome fontawesome.com --> 
                                            <time datetime="@entry.WorkflowInstance.CreatedAt.DateTime">
                                                @((object)await DisplayAsync(await New.TimeSpan(Utc: entry.WorkflowInstance.CreatedAt.DateTime)))
                                            </time>
                                        </span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-auto col-12 d-flex justify-content-end">
                                <div class="actions">
                                    @if (restartable)
                                    {
                                        <a asp-action="Restart" asp-route-id="@entry.WorkflowInstance.Id" class="btn btn-warning btn-sm" data-title="@T["Restart"]" data-message="@T["Are you sure you want to restart this workflow instance?"]" data-url-af="RemoveUrl UnsafeUrl">@T["Restart"]</a>
                                    }
                                    <a asp-action="Delete" asp-route-id="@entry.WorkflowInstance.Id" class="btn btn-danger btn-sm" data-message="@T["Are you sure you want to delete this workflow instance?"]" data-url-af="RemoveUrl UnsafeUrl">@T["Delete"]</a>
                                </div>
                            </div>
                        </div>
                    </li>
                }
            }
            else
            {
                <li class="list-group-item">
                    <div class="alert alert-info mb-0" role="alert">
                        @T["<strong>Nothing here.</strong> There are no workflow instances to display."]
                    </div>
                </li>
            }
        </ul>
        @await DisplayAsync(Model.Pager)
    </div>
</form>

@if (!string.IsNullOrEmpty(Model.ReturnUrl))
{
    <div class="mb-3">
        <a class="btn btn-secondary" href="@Model.ReturnUrl">@T["Back"]</a>
    </div>
}

<script at="Foot">
    $(function () {
        $('.selectpicker').selectpicker();
        $('.selectpicker').on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
            $("[name='submit.Filter']").click();
        });
        var actions = $("#actions");
        var items = $("#items");
        var filters = $(".filter");
        var selectAllCtrl = $("#select-all");
        var selectedItems = $("#selected-items");
        var itemsCheckboxes = $(":checkbox[name='itemIds']");

        $(".filter-options input").on("change", function () {
            $("[name='submit.Filter']").click();
        });

        $(".dropdown-menu .dropdown-item").filter(function () {
            return $(this).data("action");
        }).on("click", function () {
            if ($(":checkbox[name='itemIds']:checked").length >= 1) {
                var $this = $(this);
                confirmDialog({
                    title: $this.data('title'), message: $this.data('message'), callback: function (r) {
                        if (r) {
                            $("[name='Options.InstanceBulkAction']").val($this.data("action"));
                            $("[name='submit.BulkAction']").click();
                        }
                    }
                });
            }
        });

        function displayActionsOrFilters() {
            if ($(":checkbox[name='itemIds']:checked").length >= 1) {
                actions.show();
                filters.hide();
                selectedItems.show();
                items.hide();
            } else {
                actions.hide();
                filters.show();
                selectedItems.hide();
                items.show();
            }
        }

        selectAllCtrl.click(function () {
            itemsCheckboxes.not(this).prop("checked", this.checked);
            selectedItems.text($(":checkbox[name='itemIds']:checked").length + ' @T["selected"]');
            displayActionsOrFilters();
        });

        itemsCheckboxes.on("click", function () {
            var itemsCount = $(":checkbox[name='itemIds']").length;
            var selectedItemsCount = $(":checkbox[name='itemIds']:checked").length;

            selectAllCtrl.prop("checked", selectedItemsCount == itemsCount);
            selectAllCtrl.prop("indeterminate", selectedItemsCount > 0 && selectedItemsCount < itemsCount);

            selectedItems.text(selectedItemsCount + ' @T["selected"]');
            displayActionsOrFilters();
        });
    });
</script>
